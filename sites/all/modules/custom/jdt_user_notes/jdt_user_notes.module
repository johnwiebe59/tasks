<?php

/**
 * @file
 *
 * Module file for jdt_user_notes
 * Creates a permission, two menus and two forms for creating and updating notes
 */

require_once('jdt_user_notes_api.inc');
require_once('jdt_user_notes_block.inc');

/**
 * Implements hook_permission()
 *
 * Defines new permissions for jdt_user_notes
 */
function jdt_user_notes_permission() {
    return array(
        'notes' => array(
            'title' => t('Add Notes'),
            'description' => t('Allows a user to create and update their own notes.')
        )
    );
}

/**
 * Implements hook_menu()
 *
 * Create a menu entry to link to note creation form
 */
function jdt_user_notes_menu() {

    // Create note menu
    $items['node/%/create_note'] = array(
        'title' => 'Create Note',
        'description' => 'Creates a new note for an article',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('jdt_user_notes_new_form', 1),
        'access arguments' => array('notes'),
    );
    // Update note menu
    $items['node/%/%'] = array(
        'title' => 'Update Note',
        'description' => 'Update the text of an existing note',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('jdt_user_notes_update_form', 1, 2),
        'access arguments' => array('notes')
    );

    return $items;
}

/**
 * Implements hook_form()
 *
 * Creates a custom form for entering the text for a new note
 */
function jdt_user_notes_new_form($form, &$form_state, $nid) {
    $form['description'] = array(
        '#type' => 'item',
        '#title' => t('Enter the text for your new note')
    );

    $form['nid'] = array(
        '#type' => 'hidden',
        '#value' => $nid
    );

    $form['note'] = array(
        '#type' => 'textarea',
        '#title' => t('Note'),
        '#required' => TRUE
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit'
    );

    return $form;
}

/**
 * Implements hook_submit()
 *
 * Submit the note information entered in form to database to create a new note
 */
function jdt_user_notes_new_form_submit($form, &$form_state) {
    global $user;
    new_note($form_state['values']['nid'], $user->uid, $form_state['values']['note']);
    $form_state['redirect'] = 'node/' . $form_state['values']['nid'];
}

/**
 * Implements hook_form()
 *
 * Edit the text of an existing note
 */
function jdt_user_notes_update_form($form, &$form_state, $nid, $note_id) {
    $note = get_note($note_id);

    $form['description'] = array(
        '#type' => 'item',
        '#title' => t('Edit an existing note')
    );

    $form['note_text'] = array(
        '#type' => 'textarea',
        '#title' => t('Note'),
        '#default_value' => $note->fetch()->note_text,
        '#required' => TRUE
    );

    $form['note_id'] = array(
        '#type' => 'hidden',
        '#value' => $note_id
    );

    $form['nid'] = array(
        '#type' => 'hidden',
        '#value' => $nid
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
    );

    return $form;
}

/**
 * Implements hook_submit()
 *
 * Will update the text of the note in the database
 */
function jdt_user_notes_update_form_submit($form, &$form_state) {
    update_note($form_state['values']['note_id'], $form_state['values']['note_text']);
    $form_state['redirect'] = 'node/' . $form_state['values']['nid'];
}
