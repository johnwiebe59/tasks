<?php

/**
 * @file
 *
 * Module file for jdt_user_notes
 */

require_once('jdt_user_notes_api.inc');
require_once('jdt_user_notes_forms.inc');

/**
 * Implements hook_permission()
 *
 * Defines new permissions for jdt_user_notes
 */
function jdt_user_notes_permission() {
    return array(
        'notes' => array(
            'title' => t('Add Notes'),
            'description' => t(
                'Allows a user to create and update their own notes.'
            )
        )
    );
}

/**
 * Implements hook_menu()
 *
 * Create a menu entry to link to note creation form
 */
function jdt_user_notes_menu() {
    // View notes for article
    $items['node/%/notes'] = array(
        'title' => 'Notes',
        'description' => 'View notes for this article',
        'page callback' => 'jdt_user_notes_list',
        'page arguments' => array(1),
        'access arguments' => array('notes'),
        'type' => MENU_LOCAL_TASK

    ); 

    // Create note menu
    $items['node/%/%ctools_js/create_note'] = array(
        'title' => 'Create Note',
        'description' => 'Creates a new note for an article',
        'page callback' => 'jdt_user_notes_modal',
        'page arguments' => array(1, 2, 'jdt_user_notes_new_form'),
        'access arguments' => array('notes'),
        'type' => MENU_CALLBACK
    );

    // Update note menu
    $items['node/%/%ctools_js/update_note'] = array(
        'title' => 'Update Note',
        'description' => 'Update the text of an existing note',
        'page callback' => 'jdt_user_notes_modal',
        'page arguments' => array(1, 2, 'jdt_user_notes_update_form'),
        'access arguments' => array('notes'),
        'type' => MENU_CALLBACK
    );

    return $items;
}

/**
 * Create a page to list all the notes for the current article
 */
function jdt_user_notes_list($nid) {
  // CTools modal stuff
  ctools_include('modal');
  ctools_modal_add_js();

  // All the content is wrapped in a div so it can be reloaded via ajax
  $output = '<div id="notes_list" >';

  global $user;
  $uid = $user->uid;

  $rows = array();
  $header = array('Notes (click on a note to edit it)');

  // Get all the notes for this article
  $notes = get_article_notes($uid, $nid);
  foreach ($notes as $note) {
    $rows[] = array(
      l($note->note_text, 'node/' . $note->note_id . '/nojs/update_note', array('attributes' => array('class' => 'ctools-use-modal')))
    );
  }

  // If the article doesn't have any notes, add a message saying so
  if (count($rows) == 0) {
    $rows[] = array('You currently dont have any notes for this article!');
  }

  // Add a link to create a new note
  $output .= l('Create a New Note', 'node/' . $nid . '/nojs/create_note', array('attributes' => array('class' => 'ctools-use-modal')));
  
  // Add the table
  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  $output .= '</div>';

  return $output;
}

/**
 * Handles the modal popups 
 */
function jdt_user_notes_modal($id, $js = NULL, $form) {
    if ($js) {
        // Depending on the form to be used, generate an appropriate title
        switch ($form) {
            case 'jdt_user_notes_new_form' :
                $title = t('Create a New Note');
                break;
            case 'jdt_user_notes_update_form' :
                $title = t('Update Your Note');
                break;
        }

        ctools_include('ajax');
        ctools_include('modal');

        $form_state = array(
            'ajax' => TRUE,
            'title' => $title,
            'id' => $id
        );

        $output = ctools_modal_form_wrapper($form, $form_state);

        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }

        print ajax_render($output);
        drupal_exit();
    }
    else {
        return drupal_get_form($form, $id);
    }
}

/**
 * Implements hook_block_info()
 *
 * Defines a block only visible on pages of content type 'article'
 * And a block for displaying site statistics
 */
function jdt_user_notes_block_info() {
  // List notes for article block
  /*$blocks['notes'] = array(
    'info' => t('Display Notes'),
    'cache' => DRUPAL_CACHE_PER_USER,
    'status' => 1,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_PHP,
    // Ugly code to only display block if the user has permission 
    // and the page is an article
    'pages' => "<?php
                  if (arg(0) == 'node' && is_numeric(arg(1))) { 
                    if (user_access('note')) {
                      if (node_load(arg(1))->type == 'article') {
                        return TRUE;
                      }
                    }
                  } 
                  return FALSE; 
                ?>"
  );*/
  // @TODO not showing up in a fresh repo. Neither is the context thingy.
  // Site Statistics block
  $blocks['statistics'] = array(
    'info' => t('Site Statistics'),
    'cache' => DRUPAL_CACHE_PER_ROLE
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function jdt_user_notes_block_view($delta = '') {
  $block = '';
  switch ($delta) {
    /*case 'notes' :
      ctools_include('modal');
      ctools_modal_add_js();

      $block['subject'] = t('Notes for this article:');
      $block['content'] = drupal_get_form('jdt_user_notes_article_form', arg(1));
      break;*/

    case 'statistics' :
      $block['subject'] = t('Site Statistics');
      $block['content'] = site_statistics_content();
      break;
  }
  return $block;
}

/**
 * Generates the content for the site statistics block
 */
function site_statistics_content() {
  $articles = db_select('node')
    ->condition('type', 'article', '=')
    ->countQuery()
    ->execute()
    ->fetchField();

  $notes = db_select('jdt_user_notes')
    ->countQuery()
    ->execute()
    ->fetchField();

  $users = db_select('users')
    ->countQuery()
    ->execute()
    ->fetchField();

  $content = array(
    '#items' => array(
      'Number of Articles: ' . $articles,
      'Number of Notes: ' . $notes,
      'Number of Users: ' . ($users - 1) // There appears to be a blank user stored in the DB
    ),
    '#theme' => 'item_list'
  );
  return $content;
}
